[{"path":"https://jef.works/SEraster/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gohta Aihara. Author, maintainer. Lyla Atta. Author. Jean Fan. Author, reviewer.","code":""},{"path":"https://jef.works/SEraster/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aihara G, Atta L, Fan J (2024). SEraster: Rasterization Preprocessing Framework Scalable Spatial Omics Data Analysis. R package version 0.99.0, https://github.com/JEFworks-Lab/SEraster.","code":"@Manual{,   title = {SEraster: Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis},   author = {Gohta Aihara and Lyla Atta and Jean Fan},   year = {2024},   note = {R package version 0.99.0},   url = {https://github.com/JEFworks-Lab/SEraster}, }"},{"path":"https://jef.works/SEraster/index.html","id":"spatial-experiments-raster-seraster","dir":"","previous_headings":"","what":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"SEraster rasterization preprocessing framework aggregates cellular information spatial pixels reduce resource requirements spatial omics data analysis.","code":""},{"path":"https://jef.works/SEraster/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"SEraster reduces number spatial points spatial omics datasets downstream analysis process rasterization single cells’ gene expression cell-type labels aggregated equally sized pixels based user-defined resolution. , refer particular resolution rasterization side length pixel finer resolution indicates smaller pixel size coarser resolution indicates larger pixel size.","code":""},{"path":"https://jef.works/SEraster/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"install SEraster, recommend using remotes:","code":"require(remotes) remotes::install_github('JEFworks-Lab/SEraster')"},{"path":[]},{"path":"https://jef.works/SEraster/index.html","id":"input-data-format","dir":"","previous_headings":"","what":"Input data format","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"examples , assume input data provided SpatialExperiment Bioconductor object. Please refer SpatialExperiment package merfish_mousePOA dataset package see format data SpatialExperiment object.","code":""},{"path":"https://jef.works/SEraster/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"short example workflow shown .","code":""},{"path":"https://jef.works/SEraster/index.html","id":"load-packages","dir":"","previous_headings":"Example","what":"Load packages","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"","code":"library(SpatialExperiment) library(SEraster)"},{"path":"https://jef.works/SEraster/index.html","id":"load-example-dataset","dir":"","previous_headings":"Example","what":"Load example dataset","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"MERFISH mouse preoptic area dataset contains 6,509 cells 16 cell-types.","code":"data(\"merfish_mousePOA\")  # check the dimension of the genes-by-cells matrix at single-cell resolution dim(merfish_mousePOA) [1]  155 6509 # check the number of cell-types length(unique(colData(merfish_mousePOA)$celltype)) [1]  16 # plot at single-cell resolution df <- data.frame(spatialCoords(merfish_mousePOA), celltype = colData(merfish_mousePOA)$celltype) ggplot(df, aes(x = x, y = y, col = celltype)) +   geom_point(size = 1) +   labs(x = \"x (μm)\",        y = \"y (μm)\",        col = \"Cell-types\") +   theme_bw() +   theme(panel.grid = element_blank())"},{"path":[]},{"path":"https://jef.works/SEraster/index.html","id":"rasterize-gene-expression","dir":"","previous_headings":"Example > Getting started","what":"Rasterize gene expression","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"can see, SEraster aggregated 6,509 single cells 1,301 pixels.","code":"rastGexp <- SEraster::rasterizeGeneExpression(merfish_mousePOA, assay_name=\"volnorm\", resolution = 50)  # check the dimension of the genes-by-cells matrix after rasterizing gene expression dim(rastGexp) [1]  155 1301 # plot total rasterized gene expression SEraster::plotRaster(rastGexp, name = \"Total rasterized gene expression\") # plot specific gene SEraster::plotRaster(rastGexp, feature_name = \"Esr1\", name = \"Esr1\")"},{"path":"https://jef.works/SEraster/index.html","id":"rasterize-cell-type-labels","dir":"","previous_headings":"Example > Getting started","what":"Rasterize cell-type labels","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"","code":"rastCt <- SEraster::rasterizeCellType(merfish_mousePOA, col_name = \"celltype\", resolution = 50)  # check the dimension of the cell-types-by-cells matrix after rasterizing cell-type labels dim(rastGexp) [1]  16 1301 # plot total cell counts SEraster::plotRaster(rastCt, name = \"cell counts\", option = \"inferno\") # plot specific cell-type SEraster::plotRaster(rastCt, feature_name = \"Inhibitory\", name = \"Inhibitory neuron counts\", option = \"inferno\")"},{"path":"https://jef.works/SEraster/index.html","id":"sample-downstream-analysis","dir":"","previous_headings":"Example","what":"Sample Downstream Analysis","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"SEraster returns rasteriezd gene-expression cell-type information SpatialExperiment objects can integrated existing downstream analysis tools. demonstrate spatial variable gene (SVG) cell-type cooccurrence analyses examples potential downstream analysis.","code":""},{"path":"https://jef.works/SEraster/index.html","id":"spatial-variable-gene-svg-analysis","dir":"","previous_headings":"Example > Sample Downstream Analysis","what":"Spatial variable gene (SVG) analysis","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":", use previously developed tool called nnSVG. Please refer nnSVG details package. can directly input rasterized gene expression SpatialExperiment object SEraster nnSVG.  can also perform cell-type specific SVG analysis subsetting dataset prior applying SEraster.","code":"library(nnSVG) # run nnSVG set.seed(0) rastGexp <- nnSVG(rastGexp, assay_name = \"pixelval\") # number of significant SVGs table(rowData(rastGexp)$padj <= 0.05) ##  ## FALSE  TRUE ##    17   138 # plot rasterized gene expression of top-ranked SVG top_svg <- which(rowData(rastGexp)$rank == 1) top_svg_name <- rownames(rowData(rastGexp))[top_svg] SEraster::plotRaster(rastGexp, feature_name = top_svg_name, name = top_svg_name) # subset data ct_interest <- \"Excitatory\" spe_sub <- merfish_mousePOA[,merfish_mousePOA$celltype == ct_interest]  # run SEraster rastGexp_sub <- SEraster::rasterizeGeneExpression(spe_sub, assay_name=\"volnorm\", resolution = 50)  # run nnSVG set.seed(0) rastGexp_sub <- nnSVG(rastGexp_sub, assay_name = \"pixelval\") # number of significant SVGs table(rowData(rastGexp_sub)$padj <= 0.05) ##  ## FALSE  TRUE  ##    45   110 # plot rasterized gene expression of top-ranked SVG top_svg <- which(rowData(rastGexp_sub)$rank == 1) top_svg_name <- rownames(rowData(rastGexp_sub))[top_svg] SEraster::plotRaster(rastGexp_sub, feature_name = top_svg_name, name = top_svg_name)"},{"path":"https://jef.works/SEraster/index.html","id":"cell-type-cooccurrence-analysis","dir":"","previous_headings":"Example > Sample Downstream Analysis","what":"Cell-type cooccurrence analysis","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"Rasterized cell-type labels can used analyze pair-wise cell-type cooccurrence. , binarize rasterized cell-type labels using relative enrichment metric previously developed tool called CooccurrenceAffinity. Please refer paper details methodology CooccurrenceAffinity details package.","code":"library(CooccurrenceAffinity) # extract cell-type labels ct_labels <- as.factor(colData(merfish_mousePOA)$celltype)  # compute relative enrichment (RE) metric mat <- assay(rastCt, \"pixelval\") mat_re <- do.call(rbind, lapply(rownames(rastCt), function(ct_label) {     mat[ct_label,] / (sum(mat[ct_label,]) / sum(mat) * colSums(mat)) })) rownames(mat_re) <- rownames(mat)  # binarize mat_bin <- ifelse(mat_re >= 1, 1, 0)  # add RE and binarized layers to SpatialExperiment object assays(rastCt) <- list(pixelval = assay(rastCt, \"pixelval\"), re = mat_re, bin = mat_bin) ct_interest <- \"Ependymal\"  # plot pixel value for a cell-type of interest plotRaster(rastCt, assay_name = \"pixelval\", feature_name = ct_interest, name = \"cell-type counts\", option = \"inferno\") # plot RE value for a cell-type of interest plotRaster(rastCt, assay_name = \"re\", feature_name = ct_interest, name = \"RE\", option = \"inferno\") # plot binarized value for a cell-type of interest plotRaster(rastCt, assay_name = \"bin\", feature_name = ct_interest, factor_levels = c(0,1), name = \"binarized\", option = \"inferno\") # run CooccurrenceAffinity ct_coocc <- CooccurrenceAffinity::affinity(data = mat_bin, row.or.col = \"row\", squarematrix = c(\"all\"))  # plot maximum likelihood estimates of affinity metric (alpha MLE) CooccurrenceAffinity::plotgg(data = ct_coocc, variable = \"alpha_mle\", legendlimit = \"datarange\")"},{"path":"https://jef.works/SEraster/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Rasterization Preprocessing Framework for Scalable Spatial Omics Data Analysis","text":"preprint describing SEraster available bioRxiv: Aihara G. et al. (2024), “SEraster: rasterization preprocessing framework scalable spatial omics data analysis”, bioRxiv","code":""},{"path":"https://jef.works/SEraster/reference/merfish_mousePOA.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessed MERFISH dataset of the mouse preoptic area for a bregma -0.29 slice \nfrom a female naive animal. — merfish_mousePOA","title":"Preprocessed MERFISH dataset of the mouse preoptic area for a bregma -0.29 slice \nfrom a female naive animal. — merfish_mousePOA","text":"Preprocessed MERFISH dataset mouse preoptic area bregma -0.29 slice  female naive animal.","code":""},{"path":"https://jef.works/SEraster/reference/merfish_mousePOA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessed MERFISH dataset of the mouse preoptic area for a bregma -0.29 slice \nfrom a female naive animal. — merfish_mousePOA","text":"","code":"data(mousePOA)"},{"path":"https://jef.works/SEraster/reference/merfish_mousePOA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Preprocessed MERFISH dataset of the mouse preoptic area for a bregma -0.29 slice \nfrom a female naive animal. — merfish_mousePOA","text":"SpatialExperiment object assay slot contains genes--cells  matrix preprocessed gene expression (total RNA counts per cell divided  cell volume scaled 1000) dgCMatrix, spatialCoords slot  contains x,y coordinates cells, colData slot contains bregma,  cell type, neuron type meta data.","code":""},{"path":"https://jef.works/SEraster/reference/merfish_mousePOA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Preprocessed MERFISH dataset of the mouse preoptic area for a bregma -0.29 slice \nfrom a female naive animal. — merfish_mousePOA","text":"https://www.science.org/doi/10.1126/science.aau5324","code":""},{"path":"https://jef.works/SEraster/reference/permutateByRotation.html","id":null,"dir":"Reference","previous_headings":"","what":"permutateByRotation — permutateByRotation","title":"permutateByRotation — permutateByRotation","text":"Function permutate given input SpatialExperiment object(s)  rotating x,y coordinates around midrange point. function assumes input provided SpatialExperiment  object list SpatialExperiment objects. input list SpatialExperiment objects,  SpatialExperiment objects rotated around common midrange  point computed based combined x,y coordinates.","code":""},{"path":"https://jef.works/SEraster/reference/permutateByRotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"permutateByRotation — permutateByRotation","text":"","code":"permutateByRotation(input, n_perm = 1, verbose = FALSE)"},{"path":"https://jef.works/SEraster/reference/permutateByRotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"permutateByRotation — permutateByRotation","text":"input SpatialExperiment list: Input data represented  SpatialExperiment list SpatialExperiment.  SpatialExperiment assumed assay slot containing feature (genes) x observation (cells) matrix dgCmatrix matrix spatialCoords slot containing spatial x,y  coordinates observations matrix array. , x,y coordinates assumed  stored column 1 2 spatialCoords, column names spatialCoords  assumed \"x\" \"y\", respectively. n_perm integer: Number permutations. Default = 1. number used compute angles input rotated . verbose logical: Whether display verbose output warning. Default FALSE.","code":""},{"path":"https://jef.works/SEraster/reference/permutateByRotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"permutateByRotation — permutateByRotation","text":"input given SpatialExperiment, output returned  list n_perm  SpatialExperiment objects. SpatialExperiment object updated spatialCoords slot containing spatial x,y coordinates  rotated corresponding angle. assay colData slots inherited. , names() output indicates angles input  rotated . input given list SpatialExperiment,  output returned new list length(input) * n_perm SpatialExperiment objects. SpatialExperiment object  updated spatialCoords slot containing spatial x,y coordinates rotated  corresponding angle. assay colData slots inherited. , names() output indicates dataset names names(input) angles input rotated .","code":""},{"path":"https://jef.works/SEraster/reference/plotRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"plotRaster — plotRaster","title":"plotRaster — plotRaster","text":"Function based ggplot2::geom_tile visualize rasterized spatial omics dataset represented SpatialExperiment object.","code":""},{"path":"https://jef.works/SEraster/reference/plotRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotRaster — plotRaster","text":"","code":"plotRaster(   input,   assay_name = NULL,   feature_name = \"sum\",   factor_levels = NULL,   showLegend = TRUE,   plotTitle = NULL,   showAxis = FALSE,   ... )"},{"path":"https://jef.works/SEraster/reference/plotRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotRaster — plotRaster","text":"input SpatialExperiment: Input data represented  SpatialExperiment. given SpatialExperiment assumed  assay slot containing features--observations matrix dgCmatrix  matrix colData slot containing sfc_POLYGON geometry  pixels. features--observations matrix assumed either genes  cell types features pixels observations. assay_name character: Name assay slot input  want visualize. argument given, first assay input  visualized. argument useful multiple assays stored  input, want visualize specific assay. Default NULL. feature_name character: Name feature input  want visualize. argument useful want specify feature  want visualize. can also use \"sum\" visualize sum feature  values per observation \"mean\" visualize mean feature values per observation.  Default \"sum\". factor_levels character numeric factor:  optional vector convert plot input data factor. argument  useful want plot categorical/ordinal variables, binarized  occurrence specific cell type. factor_levels fed levels  argument factor function base R. Default NULL. showLegend logical: Boolean show legend. Default TRUE. plotTitle character: optional argument add title  resulting plot. Default NULL. showAxis logical: Boolean show axis title, texts, ticks.  Default FALSE. ... Additional parameters pass ggplot2::scale_fill_viridis_c  argument provided factor_levels ggplot2::scale_fill_viridis_d  vector provided factor_levels. wish use color  maps, recommend overriding resulting ggplot object.","code":""},{"path":"https://jef.works/SEraster/reference/plotRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotRaster — plotRaster","text":"output returned ggplot object, input  visualized ggplot2::geom_sf. pixel plotted based sfc_POLYGON geometry stored colData slot. Coloring pixel represent corresponding  values summarized (sum mean) specific feature (e.g. rasterized gene expression)  per observation (pixel).","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeCellType.html","id":null,"dir":"Reference","previous_headings":"","what":"rasterizeCellType — rasterizeCellType","title":"rasterizeCellType — rasterizeCellType","text":"Function rasterize cell type labels spatially-resolved  omics data represented SpatialExperiment class. function assumes input provided SpatialExperiment  object list SpatialExperiment objects.","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeCellType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rasterizeCellType — rasterizeCellType","text":"","code":"rasterizeCellType(   input,   col_name,   resolution = 100,   square = TRUE,   fun = \"sum\",   n_threads = 1,   BPPARAM = NULL,   verbose = FALSE )"},{"path":"https://jef.works/SEraster/reference/rasterizeCellType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rasterizeCellType — rasterizeCellType","text":"input SpatialExperiment list: Input data represented  SpatialExperiment list SpatialExperiment.  SpatialExperiment assumed colData slot containing cell type  labels observations data frame column spatialCoords slot  containing spatial x,y coordinates observations matrix array. ,  x,y coordinates assumed stored column 1 2 spatialCoords. col_name character: Column name colData object  containing cell type labels observations. input list,  col_name assumed present elements (SpatialExperiment) input. resolution integer double: Resolution refers side  length pixel square pixels distance opposite edges  pixel hexagonal pixels. unit parameter assumed  unit spatial coordinates input data. square logical: TRUE (default), rasterize square pixels. FALSE,  rasterize hexagonal pixels. fun character: \"mean\", pixel value pixel  proportion cell type based one-hot-encoded cell type  labels cells within pixel. \"sum\", pixel value pixel  number cells cell type based one-hot-encoded cell type  labels cells within pixel. n_threads integer: Number threads parallelization. Default = 1.  Inputting argument BPPARAM argument missing set parallel  exeuction back-end BiocParallel::MulticoreParam(workers = n_threads).  recommend setting argument number cores available  (parallel::detectCores(logical = FALSE)). BPPARAM argument  missing, BPPARAM argument override n_threads argument. BPPARAM BiocParallelParam: Optional additional argument parallelization.  argument provided advanced users BiocParallel  flexibility setting parallel-execution back-end. Default NULL.  provided, assumed instance BiocParallelParam. verbose logical: Whether display verbose output warning. Default FALSE","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeCellType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rasterizeCellType — rasterizeCellType","text":"input given SpatialExperiment, output returned  new SpatialExperiment object assay slot containing  feature (cell types) x observations (pixels) matrix (dgCmatrix), spatialCoords slot containing spatial x,y coordinates pixel centroids, colData slot  containing meta data pixels (number cells aggregated pixel,  cell IDs cells aggregated pixel, pixel type based  square argument, pixel resolution based resolution argument,  pixel geometry sfc_POLYGON). input provided list SpatialExperiment, output returned new list  SpatialExperiment containing information described corresponding  SpatialExperiment. , names(input) inherited output.","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeGeneExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"rasterizeGeneExpression — rasterizeGeneExpression","title":"rasterizeGeneExpression — rasterizeGeneExpression","text":"Function rasterize feature x observation matrix spatially-resolved  omics data represented SpatialExperiment class. function assumes input provided SpatialExperiment  object list SpatialExperiment objects.","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeGeneExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rasterizeGeneExpression — rasterizeGeneExpression","text":"","code":"rasterizeGeneExpression(   input,   assay_name = NULL,   resolution = 100,   square = TRUE,   fun = \"mean\",   n_threads = 1,   BPPARAM = NULL,   verbose = FALSE )"},{"path":"https://jef.works/SEraster/reference/rasterizeGeneExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rasterizeGeneExpression — rasterizeGeneExpression","text":"input SpatialExperiment list: Input data represented  SpatialExperiment list SpatialExperiment.  SpatialExperiment assumed assay slot containing feature (genes) x observation (cells) matrix dgCmatrix matrix spatialCoords slot containing spatial x,y  coordinates observations matrix array. , x,y coordinates assumed  stored column 1 2 spatialCoords. assay_name character: Name assay slot input  want apply rasterization. argument given, first assay input  rasterized. argument useful raw normalized  assays stored input, want apply rasterization normalized assay.  input list, assay_name assumed present elements  (SpatialExperiment) input. resolution integer double: Resolution refers side  length pixel square pixels distance opposite edges  pixel hexagonal pixels. unit parameter assumed  unit spatial coordinates input data. square logical: TRUE (default), rasterize square pixels. FALSE,  rasterize hexagonal pixels. fun character: \"mean\", pixel value pixel  mean gene expression cells within pixel.  \"sum\", pixel value pixel sum gene expression  cells within pixel. n_threads integer: Number threads parallelization. Default = 1.  Inputting argument BPPARAM argument missing set parallel  exeuction back-end BiocParallel::MulticoreParam(workers = n_threads).  recommend setting argument number cores available  (parallel::detectCores(logical = FALSE)). BPPARAM argument  missing, BPPARAM argument override n_threads argument. BPPARAM BiocParallelParam: Optional additional argument parallelization.  argument provided advanced users BiocParallel  flexibility setting parallel-execution back-end. Default NULL.  provided, assumed instance BiocParallelParam. verbose logical: Whether display verbose output warning. Default FALSE","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeGeneExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rasterizeGeneExpression — rasterizeGeneExpression","text":"input given SpatialExperiment, output returned  new SpatialExperiment object assay slot containing  feature (genes) x observations (pixels) matrix (dgCMatrix matrix depending input, see documentation rasterizeMatrix), spatialCoords slot containing spatial x,y coordinates pixel centroids, colData slot  containing meta data pixels (number cells aggregated pixel,  cell IDs cells aggregated pixel, pixel type based  square argument, pixel resolution based resolution argument,  pixel geometry sfc_POLYGON). input provided list SpatialExperiment, output returned new list  SpatialExperiment containing information described corresponding  SpatialExperiment. , names(input) inherited output.","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"rasterizeMatrix — rasterizeMatrix","title":"rasterizeMatrix — rasterizeMatrix","text":"Function rasterize given input matrix (dense sparse) based given position matrix. function assumes inputs provided dgCmatrix  matrix data matrix position.","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rasterizeMatrix — rasterizeMatrix","text":"","code":"rasterizeMatrix(   data,   pos,   bbox,   resolution = 100,   square = TRUE,   fun = \"mean\",   n_threads = 1,   BPPARAM = NULL,   verbose = TRUE )"},{"path":"https://jef.works/SEraster/reference/rasterizeMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rasterizeMatrix — rasterizeMatrix","text":"data dgCmatrix matrix: Feature x observation matrix represented  dgCmatrix matrix object. Features can genes cell types. case  features cell types, matrix assumed sparse model matrix  rows cell types columns cell IDs. pos matrix: Spatial x,y coordinates observations stored  matrix array. , x,y coordinates assumed stored column 1  2 spatialCoords. bbox bbox numeric: Bounding box rasterization defined  bbox class object (created sf::st_bbox) numeric vector length four, xmin, ymin, xmax  ymax values. Values numeric vector assumed order xmin,  ymin, xmax, ymax. resolution integer double: Resolution refers side  length pixel square pixels distance opposite edges  pixel hexagonal pixels. unit parameter assumed  unit spatial coordinates input data. square logical: TRUE (default), rasterize square pixels. FALSE,  rasterize hexagonal pixels. fun character: \"mean\", pixel value pixel  average gene expression cells within pixel.  \"sum\", pixel value pixel sum gene expression  cells within pixel. n_threads integer: Number threads parallelization. Default = 1.  Inputting argument BPPARAM argument missing set parallel  exeuction back-end BiocParallel::MulticoreParam(workers = n_threads).  recommend setting argument number cores available  (parallel::detectCores(logical = FALSE)). BPPARAM argument  missing, BPPARAM argument override n_threads argument. BPPARAM BiocParallelParam: Optional additional argument parallelization.  argument provided advanced users BiocParallel  flexibility setting parallel-execution back-end. Default NULL.  provided, assumed instance BiocParallelParam. verbose logical: Whether display verbose output warning. Default FALSE","code":""},{"path":"https://jef.works/SEraster/reference/rasterizeMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rasterizeMatrix — rasterizeMatrix","text":"output returned list containing rasterized feature  x observation matrix dgCmatrix data given dgCmatrix matrix data given matrix, spatial x,y coordinates pixel  centroids matrix, data.frame containing meta data pixels  (number cells aggregated pixel, cell IDs cells  aggregated pixel, pixel type based square argument, pixel  resolution based resolution argument, pixel geometry sfc_POLYGON).","code":""}]
